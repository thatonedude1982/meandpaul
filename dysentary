import os
import itertools, random

calamityDeck = list()
globcounter = 0
globcounter1 = 0
globcounter2 = 0
supplyDeck = list()
trail = list(itertools.product(range(50))) #establishing trail length at 50 units
trailCards = list(itertools.product(range(56)))#establishing trail deck size at 56
trailInventory = list()#establishing player hand size at 6
numberPlayers = 0
players = list()

def buildCalamityDeck(calamityDeck):
    i = 0
    while i < 32:
        if i < 2:
            calamityDeck.append("Bad Water")
        elif i < 4:
            calamityDeck.append("Inadequate Grass")
        elif i < 6:
            calamityDeck.append("Extreme Cold")
        elif i < 8:
            calamityDeck.append("Broken Tongue")
        elif i < 10:
            calamityDeck.append("Broken Axle")
        elif i < 12:
            calamityDeck.append("Broken Wheel")
        elif i < 14:
            calamityDeck.append("Dead Oxen")
        elif i < 16:
            calamityDeck.append("Cholera")
        elif i < 18:
            calamityDeck.append("Typhoid")
        elif i < 20:
            calamityDeck.append("Measles")
        elif i < 22:
            calamityDeck.append("Dysentery")
        elif i < 24:
            calamityDeck.append("Food")
        elif i < 26:
            calamityDeck.append("Starvation")
        elif i < 28:
            calamityDeck.append("Snake Bite")
        elif i < 30:
            calamityDeck.append("Thief")
        elif i < 32:
            calamityDeck.append("Broken Arm")
            i += 1
        randomize(calamityDeck) 
        return calamityDeck

def trailDeckBuild(trailCards):
    print ("Building...")
    for i in range(len(trailCards)):
        if i < 8:
            trailCards[i] = "Blank Trail"
            i += 1
            continue
        elif i < 10:
            trailCards[i] = "Fort"
            i += 1
            continue
        elif i < 12:
            trailCards[i] = "Town"
            i += 1
            continue
        elif i < 36:
            trailCards[i] = "Trail Calamity"
            i += 1
            continue
        elif i < 53:
            trailCards[i] = "Ford River"
            i += 1
            continue
        else:
            trailCards[i] = "Ford River--Danger"
            i += 1
            continue

#shuffle
#function can be imported from deckManager also, but I put it
#here as well just for testing

def initTrailDraw(): #Same function as initDraw for supply cards reworked for trail
    print("You got: ")
    trailInventory = list()
    global globCounter1
    globCounter1 = 0
    for i in range (0,5):
        while globCounter1 < 55: #handles iterating through entire deck while making it "end of deck aware"
            trailInventory.append(trailCards[globCounter1])
            #print(trailCards[globCounter1])
            globCounter1 += 1
            #code to iterate loop to next player
            break
        else: # if out of cards, reshuffle and start at the top.
            randomize(trailCards)
            globcounter1 = 0
            print ("Out")
            trailInventory.append(trailCards[globCounter1])
            globCounter1 += 1
    
    return (trailInventory)

def trailDraw():
    global globCounter1
    globCounter1 = 0
    drawnCard = ""
    print("You got: ")
    for i in range(1): #almost the same as the initDraw function, but one card at a time.
        while globCounter1 < 55:
            #trailInventory.append(trailCards[globCounter1])
            drawnCard = trailCards[globCounter1]
            print (drawnCard)
            #print(trailCards[globCounter1])
            globCounter1 += 1
            return drawnCard
            #break
        else:
            randomize(trailCards)
            globCounter1 = 0
            #trailInventory.append(trailCards[globCounter1])
            drawnCard = trailCards[globCounter1]
            print (drawnCard)
            globCounter1 += 1
            return drawnCard

class Player():

    def __init__(self):
        self.name = " "
        self.number = " "
        self.dead = False
        self.turnsUntilDead = 50
        self.Cholera = False
        self.Typhoid = False
        self.Measles = False
        self.inventory = list()
        self.nextTurn = 0
        pass

    def setName(self, playerName):
        self.name = playerName

    def getName(self):
        return self.name

    def setCholera(self):
        self.Cholera = True

    def setTyphoid(self):
        self.Typhoid = True

    def setMeasles(self):
        self.Measles = True
    
    def setHeal(self):
        if self.Measles == True:
            self.Measles = False
        elif self.Cholera == True:
            self.Cholera = False
        elif self.Typhoid == True:
            self.Typhoid = False

    def killPlayer(self, currentPlayer):
        currentPlayer.dead = False
        
    #build methods for keeping track of which cards are in the players hand
    def playerHand(self, currentPlayer):
        #call deckmanager for the player
        print("test")
def randomize(list):   
    random.shuffle(list)
    
def createSupplyDeck(supplyDeck):
    supplyDeck = list(itertools.product(range(26)))

    #populating supply list
    supplyDeck[0] = "100 Bullets"
    supplyDeck[1] = "100 Bullets"
    supplyDeck[2] = "Clothes"
    supplyDeck[3] = "Clothes"
    supplyDeck[4] = "Clothes"
    supplyDeck[5] = "Oxen"
    supplyDeck[6] = "Oxen"
    supplyDeck[7] = "Oxen"
    supplyDeck[8] = "Clean Water"
    supplyDeck[9] = "Clean Water"
    supplyDeck[10] = "Clean Water"
    supplyDeck[11] = "Clean Water"
    supplyDeck[12] = "Clean Water"
    supplyDeck[13] = "200 Lbs of Food"
    supplyDeck[14] = "200 Lbs of Food"
    supplyDeck[15] = "200 Lbs of Food"
    supplyDeck[16] = "Spare Parts"
    supplyDeck[17] = "Spare Parts"
    supplyDeck[18] = "Spare Parts"
    supplyDeck[19] = "Spare Parts"
    supplyDeck[20] = "Medicine"
    supplyDeck[21] = "Medicine"
    supplyDeck[22] = "Medicine"
    supplyDeck[23] = "Medicine"
    supplyDeck[24] = "Medicine"
    supplyDeck[25] = "Medicine"

    randomize(supplyDeck) 

def initDraw(pl): #this handles the initial supply deck each player receives.
    print("You got: ")
    global globcounter
    for i in range (0,4):
        while globcounter < 25: #handles iterating through entire deck while making it "end of deck aware"
            Player.inventory = (supplyDeck[globcounter])
            globcounter += 1
            print (pl.inventory)
            #inventory.append(supplyDeck[globcounter])
            #code to iterate loop to next player
            break
    else: # if out of cards, reshuffle and start at the top.
        randomize(supplyDeck)
        globcounter = 0

def draw(pl):
    global globcounter
    for i in range(1): #almost the same as the initDraw function, but one card at a time.
        while globcounter < 25:
            print("You got: ")
            Player.inventory.append(supplyDeck[globcounter])
            print(supplyDeck[globcounter])
            globcounter += 1
            break
        else:
            randomize(supplyDeck)
            globcounter = 0

def buildPlayers():
    numberPlayers = int(input("How many travelers are making the journey? "))
    players = list()
    i = 1
    while i <= numberPlayers:
        name = input("Please enter player {}'s name: ".format(i))
        players.append(name)
        name = Player()
        i += 1
    trailDeckBuild(trailCards)
    randomize(trailCards)
    createSupplyDeck(supplyDeck)
    randomize(supplyDeck)
    buildCalamityDeck(calamityDeck)
    randomize(calamityDeck)
    print (trailCards)
    print (calamityDeck)
    print(supplyDeck)
    
def gameStart():
    pass


def playerTurn():
    print (numberPlayers)

buildPlayers()

